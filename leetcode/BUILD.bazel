load("@rules_cc//cc:defs.bzl", "cc_binary","cc_test")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc","rust_test","rust_library")

package(default_visibility = ["//visibility:public"])



# boost_deps() will re-download the tarball every time BUILD.boost
# changes, which is frustrating for doing development. Download it
# yourself, uncomment the below and change the path as appropriate
# for a faster iteration cycle on changes.
#
# new_local_repository(
#     name = "boost",
#     build_file = "@com_github_nelhage_rules_boost//:BUILD.boost",
#     path = "/home/nelhage/code/boost_1_71_0/",
# )

cc_binary(
  name = "sort_the_matrix_diagonally",
  srcs = ["sort_the_matrix_diagonally.cpp"]
)


cc_binary(
  name = "rotate_image",
  srcs = ["rotate_image.cpp"]
)


cc_binary(
  name = "numbers_with_same_consective_differences",
  copts = ["-std=c++17"],
  srcs = ["numbers_with_same_consective_differences.cpp"]
)



cc_binary(
  name = "vertical_order_traversal_of_a_binary_tree",
  copts = ["-std=c++17"],
  srcs = ["vertical_order_traversal_of_a_binary_tree.cpp"]
)

rust_binary(
  name = "running_sum_of_1d_array",
  srcs = ["running_sum_of_1d_array.rs"],
  edition = "2021",
  args = []
)

rust_test(
  name = "find_pivot_index",
  srcs = ["find_pivot_index.rs"],
  edition = "2021",
  args = []
)

rust_test(
  name = "can_make_arithmetic_progression_from_sequence",
  srcs = ["can_make_arithmetic_progression_from_sequence.rs"],
  edition = "2021",
  args = [
  ]
)


cc_binary(
  name = "n_ary_tree_level_order_traversal",
  srcs = ["n_ary_tree_level_order_traversal.cpp"]
)

rust_binary(
  name = "binary_tree_pruning",
  srcs = ["binary_tree_pruning.rs"],
  edition="2018"
)

rust_test(
  name = "minimum_flips_to_make_a_or_b_equal_to_c",
  srcs = ["minimum_flips_to_make_a_or_b_equal_to_c.rs"],
  edition="2018"
)


rust_test(
  name = "count_negative_numbers_in_a_sorted_matrix",
  srcs = ["count_negative_numbers_in_a_sorted_matrix.rs"],
  edition="2018"
)

rust_test(
  name = "find_smallest_letter_greater_than_target",
  srcs = ["find_smallest_letter_greater_than_target.rs"],
  edition="2018"
)

cc_binary(
  name = "construct_string_from_binary_tree",
  srcs = ["construct_string_from_binary_tree.cpp"]
)

cc_binary(
  name = "utf_8_validation",
  srcs = ["utf_8_validation.cpp"]
)

cc_binary(
  name = "binary_tree_inorder_traversal",
  srcs = ["binary_tree_inorder_traversal.cpp"]
)



cc_binary(
  name = "the_number_of_weak",
  srcs = ["the_number_of_weak.cpp"]
)


cc_binary(
  name = "find_original_array_from_doubled_array",
  copts = ["-std=c++17"],
  srcs = ["find_original_array_from_doubled_array.cpp"]
)


cc_binary(
  name = "maximum_performance_of_a_team",
  copts = ["-std=c++17"],
  srcs = ["maximum_performance_of_a_team.cpp"]
)



cc_binary(
  name = "fibonacci_number",
  copts = ["-std=c++17"],
  srcs = ["fibonacci_number.cpp"]
)

cc_binary(
  name = "n_th_tribonacci_number",
  copts = ["-std=c++17"],
  srcs = ["n_th_tribonacci_number.cpp"]
)


cc_test(
  name = "delete_node_in_a_linked_list",
  copts = ["-std=c++17"],
  deps = [
    "@googletest//:gtest_main"
  ],
  srcs = ["delete_node_in_a_linked_list.cpp"]
)


cc_test(
  name = "largest_perimeter_triangle",
  copts = ["-std=c++17"],
  deps = [
    "@googletest//:gtest_main"
  ],
  srcs = ["largest_perimeter_triangle.cpp"]
)



cc_test(
  name = "delete_the_middle_node_of_linked_list",
  copts = ["-std=c++17"],
  deps = [
    "@googletest//:gtest_main"
  ],
  srcs = ["delete_the_middle_node_of_linked_list.cpp"]
)

cc_binary(
  name = "climbing_stairs",
  copts = ["-std=c++17"],
  srcs = ["climbing_stairs.cpp"]
)

cc_binary(
  name = "minimum_difficulty_of_a_job_schedule",
  copts = ["-std=c++17"],
  srcs = ["minimum_difficulty_of_a_job_schedule.cpp"]
)


cc_binary(
  name = "check_if_the_sentence_is_pangram",
  copts = ["-std=c++17"],
  srcs = ["check_if_the_sentence_is_pangram.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)





cc_test(
  name = "house_robber",
  copts = ["-std=c++17"],
  srcs = ["house_robber.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "house_robber2",
  copts = ["-std=c++17"],
  srcs = ["house_robber2.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)



cc_test(
  name = "count_and_say",
  copts = ["-std=c++17"],
  srcs = ["count_and_say.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "jump_game",
  copts = ["-std=c++17"],
  srcs = ["jump_game.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "jump_game2",
  copts = ["-std=c++17"],
  srcs = ["jump_game2.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)


cc_test(
  name = "top_k_frequent_words",
  copts = ["-std=c++17"],
  srcs = ["top_k_frequent_words.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)


cc_test(
  name = "integer_to_roman",
  copts = ["-std=c++17"],
  srcs = ["integer_to_roman.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)


cc_test(
  name = "maximum_subarray",
  copts = ["-std=c++17"],
  srcs = ["maximum_subarray.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "contains_duplicate_2",
  copts = ["-std=c++17"],
  srcs = ["contains_duplicate_2.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)


cc_test(
  name = "maximum_length_of_a_concatenated_string_with_unique_characters",
  copts = ["-std=c++17"],
  srcs = ["maximum_length_of_a_concatenated_string_with_unique_characters.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "where_will_the_ball_fall",
  copts = ["-std=c++17"],
  srcs = ["where_will_the_ball_fall.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ]
)
cc_test(
  name = "check_if_two_string_arrays_are_equivalent",
  copts = ["-std=c++17"],
  srcs = ["check_if_two_string_arrays_are_equivalent.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ],
)

cc_test(
  name = "minimum_genetic_mutaion",
  copts = ["-std=c++17"],
  srcs = ["minimum_genetic_mutaion.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ]
)
cc_test(
  name = "set_mismatch",
  copts = ["-std=c++17"],
  srcs = ["set_mismatch.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ]
)


rust_test(
  name = "determine_if_string_halves_are_alike",
  srcs = ["determine_if_string_halves_are_alike.rs"],
  edition = "2021",
  args = []
)

cc_test(
  name = "word_search_ii",
  copts = ["-std=c++17"],
  srcs = ["word_search_ii.cpp"],
  deps = [
    "@googletest//:gtest_main"
  ]
)



rust_binary(
  name = "binary_tree_pruning",
  srcs = ["binary_tree_pruning.rs"],
  edition = "2018"
)


rust_library(
  name = "minimum_flips_to_make_a_or_b_equal_to_c_lib",
  srcs = ["minimum_flips_to_make_a_or_b_equal_to_c.rs"],
  edition = "2018"
)
rust_test(
  name = "minimum_flips_to_make_a_or_b_equal_to_c",
  crate = ":minimum_flips_to_make_a_or_b_equal_to_c_lib",
)


rust_library(
  name = "count_negative_numbers_in_a_sorted_matrix_lib",
  srcs = ["count_negative_numbers_in_a_sorted_matrix.rs"],
  edition = "2018"
)

rust_test(
  name = "count_negative_numbers_in_a_sorted_matrix",
  crate = ":count_negative_numbers_in_a_sorted_matrix_lib",
)


rust_library(
  name = "find_smallest_letter_greater_than_target_lib",
  srcs = ["find_smallest_letter_greater_than_target.rs"],
  edition = "2018"
)
rust_test(
  name = "find_smallest_letter_greater_than_target",
  crate = ":find_smallest_letter_greater_than_target_lib",

)


rust_binary(
  name = "running_sum_of_1d_array",
  srcs = ["running_sum_of_1d_array.rs"],
  edition = "2018",
  args = []
)


rust_library(
  name = "find_pivot_index_lib",
  srcs = ["find_pivot_index.rs"],
  edition = "2018"
)
rust_test(
  name = "find_pivot_index",
  crate = ":find_pivot_index_lib",
)


rust_library(
  name = "can_make_arithmetic_progression_from_sequence_lib",
  srcs = ["can_make_arithmetic_progression_from_sequence.rs"],
  edition = "2018"
)
rust_test(
  name = "can_make_arithmetic_progression_from_sequence",
  crate = ":can_make_arithmetic_progression_from_sequence_lib",

)


rust_library(
  name = "determine_if_string_halves_are_alike_lib",
  srcs = ["determine_if_string_halves_are_alike.rs"],
  edition = "2018"
)

rust_test(
  name = "determine_if_string_halves_are_alike",
  crate = ":determine_if_string_halves_are_alike_lib",

)


rust_test(
  name = "maximum_value_at_a_given_index_in_a_bounded_array",
  srcs = ["maximum_value_at_a_given_index_in_a_bounded_array.rs"],
  edition = "2018"
)


rust_test(
  name = "lru_cache",
  srcs = ["lru_cache.rs"],
  edition = "2018"
)
